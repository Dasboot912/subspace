import web3 from './web3';

const abi = [
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			}
		],
		"name": "createProduct",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			}
		],
		"name": "editProduct",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "rating",
				"type": "uint256"
			}
		],
		"name": "rateProduct",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"payable": true,
		"stateMutability": "payable",
		"type": "fallback"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			}
		],
		"name": "newProduct",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "productId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "rating",
				"type": "uint256"
			}
		],
		"name": "Rating",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "products",
		"outputs": [
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];

const data = "0x608060405234801561001057600080fd5b506100556040518060400160405280600681526020017f6c6170746f70000000000000000000000000000000000000000000000000000081525061005a60201b60201c565b61026e565b60016000818180549050019150816100729190610193565b50600060016000805490500390506100886101bf565b6000828154811061009557fe5b90600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101435780601f1061011857610100808354040283529160200191610143565b820191906000526020600020905b81548152906001019060200180831161012657829003601f168201915b50505050508152505090508281600001819052507f5dc23a654c93455cd36741580d5c1fafc8f35c429bb831bc768008bd655a1219826040518082815260200191505060405180910390a1505050565b8154818355818111156101ba578183600052602060002091820191016101b991906101d2565b5b505050565b6040518060200160405280606081525090565b6101fe91905b808211156101fa57600080820160006101f19190610201565b506001016101d8565b5090565b90565b50805460018160011615610100020316600290046000825580601f106102275750610246565b601f0160209004906000526020600020908101906102459190610249565b5b50565b61026b91905b8082111561026757600081600090555060010161024f565b5090565b90565b6106cb8061027d6000396000f3fe60806040526004361061003f5760003560e01c806302ec06be1461004157806311eaa75a146101095780637acc0b20146101db578063f4ef9e361461028f575b005b34801561004d57600080fd5b506101076004803603602081101561006457600080fd5b810190808035906020019064010000000081111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111640100000000831117156100b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102d4565b005b34801561011557600080fd5b506101d96004803603604081101561012c57600080fd5b81019080803590602001909291908035906020019064010000000081111561015357600080fd5b82018360208201111561016557600080fd5b8035906020019184600183028401116401000000008311171561018757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061040d565b005b3480156101e757600080fd5b50610214600480360360208110156101fe57600080fd5b8101908080359060200190929190505050610440565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610254578082015181840152602081019050610239565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029b57600080fd5b506102d2600480360360408110156102b257600080fd5b8101908080359060200190929190803590602001909291905050506104ff565b005b60016000818180549050019150816102ec919061053b565b5060006001600080549050039050610302610567565b6000828154811061030f57fe5b90600052602060002001604051806020016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b50505050508152505090508281600001819052507f5dc23a654c93455cd36741580d5c1fafc8f35c429bb831bc768008bd655a1219826040518082815260200191505060405180910390a1505050565b806000838154811061041b57fe5b90600052602060002001600001908051906020019061043b92919061057a565b505050565b6000818154811061044d57fe5b90600052602060002001600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b5050505050905081565b817ffdefdf8d82459f7b1eb157e5c44cbe6ee73d8ddd387511fe3622a3ee663b4697826040518082815260200191505060405180910390a25050565b8154818355818111156105625781836000526020600020918201910161056191906105fa565b5b505050565b6040518060200160405280606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105bb57805160ff19168380011785556105e9565b828001600101855582156105e9579182015b828111156105e85782518255916020019190600101906105cd565b5b5090506105f69190610629565b5090565b61062691905b808211156106225760008082016000610619919061064e565b50600101610600565b5090565b90565b61064b91905b8082111561064757600081600090555060010161062f565b5090565b90565b50805460018160011615610100020316600290046000825580601f106106745750610693565b601f0160209004906000526020600020908101906106929190610629565b5b5056fea265627a7a723158207edf05422cf9e8fdd43b6bed8a48f8fca2f9c986b2579db7d628dca6781c5ef764736f6c634300050b0032";

const MyContract = new web3.eth.Contract(abi, {data, gas: "800000"});

MyContract.getInstance = async() => {
	if (!web3.eth.defaultAccount) {
		const accounts = await web3.eth.getAccounts();
		web3.eth.defaultAccount = accounts[0];
	}
  const instance = await MyContract.deploy().send({from: web3.eth.defaultAccount});
  instance.options.from = web3.eth.defaultAccount;
  return instance;
}

export default MyContract;
